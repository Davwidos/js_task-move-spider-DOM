{"mappings":"ACEA,SAAS,gBAAgB,CAAC,QAAS,AAAC,IAClC,kBAAkB;AAClB,IAAI,EAAO,EAAE,MAAM,CAEnB,KAAO,CAAC,EAAK,SAAS,CAAC,QAAQ,CAAC,SAG9B,GAAI,CAFJ,CAAA,EAAO,EAAK,WAAW,AAAX,EAGV,OAIJ,IAAM,EAAS,EAAK,aAAa,CAAC,WAE5B,CAAE,EAAG,CAAI,CAAE,EAAG,CAAI,CAAE,CAAG,EAAK,qBAAqB,GACjD,EAAW,IAAI,EACnB,EAAO,EAAK,UAAU,CACtB,EAAO,EAAK,SAAS,CACrB,EAAK,WAAW,CAChB,EAAK,YAAY,EAIb,EAAgB,EAAO,WAAW,CAAG,EACrC,EAAgB,EAAO,YAAY,CAAG,EACtC,EAAmB,IAAI,EAC3B,EAAE,OAAO,CAAG,EACZ,EAAE,OAAO,CAAG,EACZ,EAAO,WAAW,CAClB,EAAO,YAAY,EAGrB;;;;EAIA,EACA,EAAiB,UAAU,CAAC,GAAU,cAAc,CAAC,GAErD,EAAO,KAAK,CAAC,IAAI,CAAG,EAAiB,CAAC,CAAG,KACzC,EAAO,KAAK,CAAC,GAAG,CAAG,EAAiB,CAAC,CAAG,IAC1C,EAEA,OAAM,EACJ,YAAY,CAAC,CAAE,CAAC,CAAE,CAAK,CAAE,CAAM,CAAE,CAC/B,IAAI,CAAC,CAAC,CAAG,EACT,IAAI,CAAC,CAAC,CAAG,EACT,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,CAChB,CAEA;;;EAGA,EACA,eAAe,CAAI,CAAE,CACnB,GAAI,CAAE,CAAA,aAAgB,CAAA,EACpB,MAAM,AAAI,MAAM,oBAMlB,OAHA,IAAI,CAAC,CAAC,EAAI,EAAK,CAAC,CAChB,IAAI,CAAC,CAAC,EAAI,EAAK,CAAC,CAET,IAAI,AACb,CAEA;;;;EAIA,EACA,WAAW,CAAI,CAAE,CAaf,OAZI,IAAI,CAAC,CAAC,CAAG,EAAK,CAAC,CACjB,IAAI,CAAC,CAAC,CAAG,EAAK,CAAC,CACN,IAAI,CAAC,CAAC,CAAG,IAAI,CAAC,KAAK,CAAG,EAAK,CAAC,CAAG,EAAK,KAAK,EAClD,CAAA,IAAI,CAAC,CAAC,CAAG,EAAK,CAAC,CAAG,EAAK,KAAK,CAAG,IAAI,CAAC,KAAK,AAAL,EAGlC,IAAI,CAAC,CAAC,CAAG,EAAK,CAAC,CACjB,IAAI,CAAC,CAAC,CAAG,EAAK,CAAC,CACN,IAAI,CAAC,CAAC,CAAG,IAAI,CAAC,MAAM,CAAG,EAAK,CAAC,CAAG,EAAK,MAAM,EACpD,CAAA,IAAI,CAAC,CAAC,CAAG,EAAK,CAAC,CAAG,EAAK,MAAM,CAAG,IAAI,CAAC,MAAM,AAAN,EAGhC,IAAI,AACb,CACF,C,2D","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"click\", (e)=>{\n    // write code here\n    let wall = e.target;\n    while(!wall.classList.contains(\"wall\")){\n        wall = wall.parrentNode;\n        if (!wall) return;\n    }\n    const spider = wall.querySelector(\".spider\");\n    // wall content rect relative to viewport\n    const { x: xPos, y: yPos } = wall.getBoundingClientRect();\n    const wallRect = new Rect(xPos + wall.clientLeft, yPos + wall.clientTop, wall.clientWidth, wall.clientHeight);\n    // spider in new pos relative to viewport\n    const spiderCenterX = spider.offsetWidth / 2;\n    const spiderCenterY = spider.offsetHeight / 2;\n    const newPosSpiderRect = new Rect(e.clientX - spiderCenterX, e.clientY - spiderCenterY, spider.offsetWidth, spider.offsetHeight);\n    /*\n    both spider and wall has position relative to viewport\n    moveInside makes sure spider is inside wall\n    sePosRealtive to make spider position relative to the wall\n  */ newPosSpiderRect.moveInside(wallRect).setPosRelative(wallRect);\n    spider.style.left = newPosSpiderRect.x + \"px\";\n    spider.style.top = newPosSpiderRect.y + \"px\";\n});\nclass Rect {\n    constructor(x, y, width, height){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    /*\n    sets position relative to anothher rect\n    both rects position must be relative to the same point\n  */ setPosRelative(rect) {\n        if (!(rect instanceof Rect)) throw new Error(\"not a rectangele\");\n        this.x -= rect.x;\n        this.y -= rect.y;\n        return this;\n    }\n    /*\n    method places this rect on border of passed rect if any part of it is\n    outside of passed rect\n    both rects position must be relative to the same point\n  */ moveInside(rect) {\n        if (this.x < rect.x) this.x = rect.x;\n        else if (this.x + this.width > rect.x + rect.width) this.x = rect.x + rect.width - this.width;\n        if (this.y < rect.y) this.y = rect.y;\n        else if (this.y + this.height > rect.y + rect.height) this.y = rect.y + rect.height - this.height;\n        return this;\n    }\n}\n\n//# sourceMappingURL=index.a2bae947.js.map\n","'use strict';\n\ndocument.addEventListener('click', (e) => {\n  // write code here\n  let wall = e.target;\n\n  while (!wall.classList.contains('wall')) {\n    wall = wall.parrentNode;\n\n    if (!wall) {\n      return;\n    }\n  }\n\n  const spider = wall.querySelector('.spider');\n  // wall content rect relative to viewport\n  const { x: xPos, y: yPos } = wall.getBoundingClientRect();\n  const wallRect = new Rect(\n    xPos + wall.clientLeft,\n    yPos + wall.clientTop,\n    wall.clientWidth,\n    wall.clientHeight,\n  );\n\n  // spider in new pos relative to viewport\n  const spiderCenterX = spider.offsetWidth / 2;\n  const spiderCenterY = spider.offsetHeight / 2;\n  const newPosSpiderRect = new Rect(\n    e.clientX - spiderCenterX,\n    e.clientY - spiderCenterY,\n    spider.offsetWidth,\n    spider.offsetHeight,\n  );\n\n  /*\n    both spider and wall has position relative to viewport\n    moveInside makes sure spider is inside wall\n    sePosRealtive to make spider position relative to the wall\n  */\n  newPosSpiderRect.moveInside(wallRect).setPosRelative(wallRect);\n\n  spider.style.left = newPosSpiderRect.x + 'px';\n  spider.style.top = newPosSpiderRect.y + 'px';\n});\n\nclass Rect {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /*\n    sets position relative to anothher rect\n    both rects position must be relative to the same point\n  */\n  setPosRelative(rect) {\n    if (!(rect instanceof Rect)) {\n      throw new Error('not a rectangele');\n    }\n\n    this.x -= rect.x;\n    this.y -= rect.y;\n\n    return this;\n  }\n\n  /*\n    method places this rect on border of passed rect if any part of it is\n    outside of passed rect\n    both rects position must be relative to the same point\n  */\n  moveInside(rect) {\n    if (this.x < rect.x) {\n      this.x = rect.x;\n    } else if (this.x + this.width > rect.x + rect.width) {\n      this.x = rect.x + rect.width - this.width;\n    }\n\n    if (this.y < rect.y) {\n      this.y = rect.y;\n    } else if (this.y + this.height > rect.y + rect.height) {\n      this.y = rect.y + rect.height - this.height;\n    }\n\n    return this;\n  }\n}\n"],"names":["document","addEventListener","e","wall","target","classList","contains","parrentNode","spider","querySelector","x","xPos","y","yPos","getBoundingClientRect","wallRect","Rect","clientLeft","clientTop","clientWidth","clientHeight","spiderCenterX","offsetWidth","spiderCenterY","offsetHeight","newPosSpiderRect","clientX","clientY","moveInside","setPosRelative","style","left","top","constructor","width","height","rect","Error"],"version":3,"file":"index.a2bae947.js.map"}